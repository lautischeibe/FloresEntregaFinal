<div class="dashboard">
  <h1>Tienda Pokémon</h1>

  <button onclick="createCart()">Crear nuevo carrito</button>

  <div style="margin-top: 10px;">
    <label for="cartSelect">Seleccionar carrito:</label>
    <select id="cartSelect"></select>
    <button onclick="selectCart()">Usar este carrito</button>
    <button onclick="loadCart()">Ver carrito</button>
    <p id="activeCartLabel">Carrito activo: ninguno</p>
  </div>

  <!-- Formulario de filtrado -->
  <form id="filterForm" style="margin: 20px 0;">
    <label for="query">Categoría:</label>
    <select id="query" name="query">
      <option value="">Todas</option>
    </select>

    <label for="minPrice">Precio mínimo:</label>
    <input type="number" id="minPrice" name="minPrice" placeholder="0" />

    <label for="maxPrice">Precio máximo:</label>
    <input type="number" id="maxPrice" name="maxPrice" placeholder="1000" />

    <label for="sort">Ordenar por precio:</label>
    <select id="sort" name="sort">
      <option value="">Ninguno</option>
      <option value="asc">Ascendente</option>
      <option value="desc">Descendente</option>
    </select>

    <button type="button" onclick="filterProducts()">Filtrar</button>
  </form>

  <!-- Render dinámico de productos -->
  <div id="product-list" class="product-grid"></div>

  <!-- Paginación -->
  <div id="pagination" style="margin-top: 20px;">
    <button id="prevPageBtn" onclick="changePage('prev')" disabled>Anterior</button>
    <span id="currentPage">Página 1</span>
    <button id="nextPageBtn" onclick="changePage('next')">Siguiente</button>
  </div>
</div>

<script>
  let activeCartId = null;
  let currentPage = 1;
  const limit = 5;

  // 1. Crear un carrito y agregarlo al <select>
  async function createCart() {
    try {
      const res = await fetch('/api/carts', { method: 'POST' });
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || 'Error al crear carrito');

      const cartId = data.payload._id;
      alert(`Carrito creado con ID: ${cartId}`);

      const select = document.getElementById('cartSelect');
      const opt = document.createElement('option');
      opt.value = cartId;
      opt.textContent = `Carrito ${cartId}`;
      select.appendChild(opt);
      select.value = cartId;

      activeCartId = cartId;
      document.getElementById('activeCartLabel').textContent =
        `Carrito activo: ${cartId}`;
    } catch (err) {
      console.error('Error al crear carrito:', err);
      alert(`Error: ${err.message}`);
    }
  }

  // 2. Seleccionar carrito desde el <select>
  function selectCart() {
    const selected = document.getElementById('cartSelect').value;
    if (!selected) {
      alert('Selecciona un carrito válido.');
      return;
    }
    activeCartId = selected;
    localStorage.setItem('activeCart', activeCartId);
    document.getElementById('activeCartLabel').textContent =
      `Carrito activo: ${activeCartId}`;
  }

  // 3. Cargar todos los carritos para el <select>
  async function loadCarts() {
    try {
      const res = await fetch('/api/carts');
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || 'Error al cargar carritos');

      const select = document.getElementById('cartSelect');
      select.innerHTML = '';
      data.payload.forEach(cart => {
        const id = cart._id;
        const opt = document.createElement('option');
        opt.value = id;
        opt.textContent = `Carrito ${id}`;
        select.appendChild(opt);
      });

      select.addEventListener('change', () => {
        activeCartId = select.value;
        document.getElementById('activeCartLabel').textContent =
          `Carrito activo: ${activeCartId}`;
      });
    } catch (err) {
      console.error('Error al cargar carritos:', err);
    }
  }

  // 4. Ver carrito en vista Handlebars
  function loadCart() {
    const cartId = document.getElementById('cartSelect').value;
    if (!cartId) {
      alert('Selecciona un carrito válido.');
      return;
    }
    window.location.href = `/api/carts/${cartId}/view`;
  }

  // 5. Agregar producto al carrito activo
  async function addToCart(_, productId) {
    const cartId = activeCartId;
    if (!cartId) {
      alert('Selecciona un carrito antes de agregar productos.');
      return;
    }
    try {
      const res = await fetch(
        `/api/carts/${cartId}/products/${productId}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ quantity: 1 })
        }
      );
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || 'Error al agregar al carrito');
      alert('Producto agregado correctamente.');
    } catch (err) {
      console.error('Error al agregar producto:', err);
      alert(`Error: ${err.message}`);
    }
  }

  // 6. Cargar categorías
  async function loadCategories() {
    try {
      const res = await fetch('/api/products/categories');
      const cats = await res.json();
      if (!res.ok) throw new Error('Error al cargar categorías');

      const select = document.getElementById('query');
      select.innerHTML = '<option value="">Todas</option>';
      cats.forEach(cat => {
        const opt = document.createElement('option');
        opt.value = cat;
        opt.textContent = cat;
        select.appendChild(opt);
      });
    } catch (err) {
      console.error('Error al cargar categorías:', err);
    }
  }

  // 7. Filtrar y paginar productos
  async function filterProducts() {
    currentPage = 1;
    await fetchProducts();
  }

  async function fetchProducts() {
    const query = document.getElementById('query').value.trim();
    const minPrice = document.getElementById('minPrice').value;
    const maxPrice = document.getElementById('maxPrice').value;
    const sort = document.getElementById('sort').value;

    let url = `/api/products?limit=${limit}&page=${currentPage}`;
    if (query)    url += `&query=${encodeURIComponent(query)}`;
    if (minPrice) url += `&minPrice=${minPrice}`;
    if (maxPrice) url += `&maxPrice=${maxPrice}`;
    if (sort)     url += `&sort=${sort}`;

    try {
      const res = await fetch(url);
      const data = await res.json();
      if (!res.ok) throw new Error(data.message);
      renderProducts(data.payload);
      updatePagination(data);
    } catch (err) {
      console.error('Error al obtener productos:', err);
    }
  }

function renderProducts(products) {
  const list = document.getElementById('product-list');
  list.innerHTML = '';
  products.forEach(p => {
    const card = document.createElement('div');
    card.className = 'product-card';
    card.innerHTML = `
      <img
        src="/img/${p.thumbnails}"
        alt="${p.title}"
        style="width:300px;height:auto;"
      />
      <h3>${p.title}</h3>
      <p><strong>Categoría:</strong> ${p.category}</p>
      <p>${p.description}</p>
      <p><strong>Precio:</strong> $${p.price}</p>
      <p><strong>Stock:</strong> ${p.stock}</p>
      <a href="/products/${p._id}">Ver detalles</a>
      <button onclick="addToCart(activeCartId,'${p._id}')">
        Agregar al carrito
      </button>
    `;
    list.appendChild(card);
  });
}



  function updatePagination({ page, hasPrevPage, hasNextPage }) {
    currentPage = page;
    document.getElementById('currentPage').textContent = `Página ${page}`;
    document.getElementById('prevPageBtn').disabled = !hasPrevPage;
    document.getElementById('nextPageBtn').disabled = !hasNextPage;
  }

  function changePage(dir) {
    if (dir === 'prev' && currentPage > 1) currentPage--;
    else if (dir === 'next') currentPage++;
    fetchProducts();
  }

  // Inicialización
  document.addEventListener('DOMContentLoaded', () => {
    loadCarts();
    fetchProducts();
    loadCategories();
  });
</script>

<style>
  body {
    font-family: Arial, sans-serif;
    background-color: #f8f8f8;
    text-align: center;
  }

  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 16px;
    margin-top: 20px;
    padding: 10px;
  }

  .product-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 16px;
    background: #fff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  .product-card button {
    margin-top: 10px;
    padding: 8px 12px;
    background: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .product-card button:hover {
    background: #0056b3;
  }
</style>