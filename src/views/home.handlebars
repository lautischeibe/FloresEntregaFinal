<div class="dashboard">
  <h1>Tienda Pok√©mon</h1>

  <button onclick="createCart()">Crear nuevo carrito üõí</button>

  <div style="margin-top: 10px;">
    <label for="cartSelect">Seleccionar carrito üõí:</label>
    <select id="cartSelect"></select>
    <button onclick="selectCart()">Usar este carrito ‚úÖ</button>
    <button onclick="loadCart()">Ver carrito üõí</button>
    <p id="activeCartLabel">Carrito activo: ninguno</p>
  </div>

  <!-- Formulario de filtrado -->
  <form id="filterForm" style="margin: 20px 0;">
    <label for="query">Categor√≠a:</label>
    <select id="query" name="query">
      <option value="">Todas</option>
    </select>

    <label for="minPrice">Precio m√≠nimo:</label>
    <input type="number" id="minPrice" name="minPrice" placeholder="0" />

    <label for="maxPrice">Precio m√°ximo:</label>
    <input type="number" id="maxPrice" name="maxPrice" placeholder="1000" />

    <label for="sort">Ordenar por precio:</label>
    <select id="sort" name="sort">
      <option value="">Ninguno</option>
      <option value="asc">Ascendente</option>
      <option value="desc">Descendente</option>
    </select>

    <button type="button" onclick="filterProducts()">Filtrar</button>
  </form>

  <!-- Render din√°mico de productos -->
  <div id="product-list" class="product-grid"></div>

  <!-- Paginaci√≥n -->
  <div id="pagination" style="margin-top: 20px;">
    <button id="prevPageBtn" onclick="changePage('prev')" disabled>Anterior</button>
    <span id="currentPage">P√°gina 1</span>
    <button id="nextPageBtn" onclick="changePage('next')">Siguiente</button>
  </div>
</div>

<!-- Scripts -->
<script>
  let activeCartId = null;
  let currentPage = 1;
  const limit = 5;

  async function createCart() {
    try {
      const response = await fetch('/api/carts', { method: 'POST' });
      if (!response.ok) throw new Error('Error al crear carrito');

      const newCart = await response.json();
      const cartId = newCart._id || newCart.id;

      alert(`Carrito creado con ID: ${cartId}`);

      const cartSelect = document.getElementById('cartSelect');
      const option = document.createElement('option');
      option.value = cartId;
      option.textContent = `Carrito ${cartId}`;
      cartSelect.appendChild(option);
      cartSelect.value = cartId;

      document.getElementById('activeCartLabel').textContent = `Carrito activo: ${cartId}`;
    } catch (error) {
      console.error('Error al crear el carrito:', error);
      alert('Hubo un problema al crear el carrito.');
    }
  }

  function selectCart() {
    const selected = document.getElementById('cartSelect').value;

    if (!selected) {
      alert('Seleccion√° un carrito v√°lido.');
      return;
    }

    activeCartId = selected;
    localStorage.setItem("activeCart", activeCartId);
    document.getElementById('activeCartLabel').textContent = `Carrito activo: ${activeCartId}`;
  }


  async function loadCarts() {
    try {
      const response = await fetch('/api/carts');
      if (!response.ok) throw new Error('Error al cargar carritos');

      const carts = await response.json();
      const cartSelect = document.getElementById('cartSelect');
      cartSelect.innerHTML = '';

      carts.forEach(cart => {
        const cartId = cart._id || cart.id;
        const option = document.createElement('option');
        option.value = cartId;
        option.textContent = `Carrito ${cartId}`;
        cartSelect.appendChild(option);
      });

      cartSelect.addEventListener('change', () => {
        const selected = cartSelect.value;
        document.getElementById('activeCartLabel').textContent = `Carrito activo: ${selected}`;
      });
    } catch (error) {
      console.error('Error al cargar carritos:', error);
    }
  }

  async function loadCart() {
    const cartId = document.getElementById('cartSelect').value;
    if (!cartId) {
      alert('Seleccion√° un carrito v√°lido.');
      return;
    }
    window.location.href = `/api/carts/${cartId}/view`;
  }

  async function addToCart(cartId, productId) {
    cartId = cartId || activeCartId;
    if (!cartId || !productId) {
      alert('Seleccion√° un carrito antes de agregar productos.');
      return;
    }

    try {
      const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity: 1 })
      });

      if (response.ok) {
        alert('Producto agregado correctamente al carrito.');
      } else {
        const errorData = await response.json();
        alert(`Error: ${errorData.message}`);
      }
    } catch (error) {
      console.error('Error al agregar producto:', error);
      alert('Hubo un problema al agregar el producto.');
    }
  }

async function loadCategories() {
  try {
    const response = await fetch('/api/products/categories');
    if (!response.ok) throw new Error('Error al cargar categor√≠as');

    const categories = await response.json();
    const querySelect = document.getElementById('query');
    querySelect.innerHTML = '<option value="">Todas</option>';

    categories.forEach(cat => {
      const option = document.createElement('option');
      option.value = cat;
      option.textContent = cat;
      querySelect.appendChild(option);
    });
  } catch (error) {
    console.error('Error al cargar categor√≠as:', error);
  }
}

async function filterProducts() {
  currentPage = 1; // Reiniciar paginaci√≥n al aplicar filtros

  const query = document.getElementById('query').value;
  const minPrice = document.getElementById('minPrice').value;
  const maxPrice = document.getElementById('maxPrice').value;
  const sort = document.getElementById('sort').value;

  let url = `/api/products/filter?limit=${limit}&page=${currentPage}&`;
  if (query) url += `query=${query}&`;
  if (minPrice) url += `minPrice=${minPrice}&`;
  if (maxPrice) url += `maxPrice=${maxPrice}&`;
  if (sort) url += `sort=${sort}`;

  try {
    const response = await fetch(url);
    if (response.ok) {
      const data = await response.json();
      renderProducts(data.payload);
      updatePagination(data);
    } else {
      console.error('Error al filtrar productos:', await response.json());
    }
  } catch (error) {
    console.error('Error al filtrar productos:', error);
  }
}



  async function fetchProducts(page = 1) {
    try {
      const response = await fetch(`/api/products?limit=${limit}&page=${page}`);
      if (response.ok) {
        const data = await response.json();
        renderProducts(data.payload);
        updatePagination(data);
      } else {
        console.error('Error al obtener productos:', await response.json());
      }
    } catch (error) {
      console.error('Error al obtener productos:', error);
    }
  }

  function renderProducts(products) {
    const productList = document.getElementById('product-list');
    productList.innerHTML = '';
    products.forEach(product => {
      const productCard = document.createElement('div');
      productCard.className = 'product-card';
      productCard.innerHTML = `
        <img src="/img/${product.thumbnails}" alt="${product.title}" style="width: 300px; height: auto;" />
        <h3>${product.title}</h3>
        <p><strong>Categor√≠a:</strong> ${product.category}</p>
        <p>${product.description}</p>
        <p><strong>Precio:</strong> $${product.price}</p>
        <a href="/products/${product._id}">üîç Ver detalles</a>
        <button onclick="addToCart(activeCartId, '${product._id}')">Agregar al carrito</button>
      `;
      productList.appendChild(productCard);
    });
  }

  function updatePagination({ page, hasPrevPage, hasNextPage }) {
    currentPage = page;
    document.getElementById('currentPage').textContent = `P√°gina ${currentPage}`;
    document.getElementById('prevPageBtn').disabled = !hasPrevPage;
    document.getElementById('nextPageBtn').disabled = !hasNextPage;
  }

  function changePage(direction) {
    if (direction === 'prev' && currentPage > 1) {
      fetchProducts(currentPage - 1);
    } else if (direction === 'next') {
      fetchProducts(currentPage + 1);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    loadCarts();
    fetchProducts();
    filterProducts();
    loadCategories();
  });
</script>



<!-- Estilo b√°sico -->
<style>
  body {
    font-family: Arial, sans-serif;
    background-color: #f8f8f8;
    text-align: center;
  }

  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 16px;
    margin-top: 20px;
    padding: 10px;
  }

  .product-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 16px;
    background: #fff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  .pokemon-icon {
    width: 100px;
    height: 100px;
    object-fit: contain;
    margin-bottom: 10px;
  }

  .product-card button {
    margin-top: 10px;
    padding: 8px 12px;
    background: #007BFF;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }


  .pokemon-image {
    width: 100px;
    height: 100px;
    object-fit: contain;
    margin-bottom: 10px;
  }

  .product-card button:hover {
    background: #0056b3;
  }
</style>